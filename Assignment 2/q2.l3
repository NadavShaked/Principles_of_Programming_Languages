(define last-element
  (lambda (lst)
    (if (eq? (cdr lst) '())
        (car lst)
        (last-element (cdr lst)))))

(define power
  (lambda (n1 n2)
    (if (eq? n2 0)
        1
        (* n1 (power n1 (- n2 1))))))

(define sum-lst-power
  (lambda (lst N)
    (if (eq? lst '())
        0
        (+ (power (car lst) N) (sum-lst-power (cdr lst) N)))))

(define num-from-digits
  (lambda (lst)
    (if (eq? lst '())
        0
        (+ (* (car lst) (power 10 (- (list-size lst) 1))) (num-from-digits (cdr lst))))))

(define is-narcissistic
  (lambda (lst)
    (eq? (num-from-digits lst) (sum-lst-power lst (list-size lst)))))

(define list-size
  (lambda (lst)
    (if (eq? lst '())
        0
        (+ 1 (list-size (cdr lst))))))